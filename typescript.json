{
  "store": {
    "prefix": "freenitstore",
    "body": [
      "import { methods, store } from '@freenit-framework/core'",
      "",
      "export default class ${1/(.*)/${1:/capitalize}/}Store {",
      "  list = \\$state({ page: 0, perpage: 0, data: [], total: 0 })",
      "  detail = \\$state({})",
      "",
      "  constructor(prefix) {",
      "    this.prefix = prefix",
      "    store.${1} = this",
      "  }",
      "",
      "  fetchAll = async (page: Number = 1, perpage: Number = 10) => {",
      "    await store.auth.refresh_token()",
      "    const response = await methods.get(`\\${this.prefix}/${1}s`, { page, perpage })",
      "    if (response.ok) {",
      "      const data = await response.json()",
      "      this.list = data",
      "      return { ...data, ok: true }",
      "    }",
      "    return response",
      "  }",
      "",
      "  create = async (fields: Record<string, any>) => {",
      "    await store.auth.refresh_token()",
      "    const response = await methods.post(`\\${this.prefix}/${1}s`, fields)",
      "    if (response.ok) {",
      "      const data = await response.json()",
      "      this.list = data",
      "      return { ...data, ok: true }",
      "    }",
      "    return response",
      "  }",
      "",
      "  fetch = async (id: Number) => {",
      "    await store.auth.refresh_token()",
      "    const response = await methods.get(`\\${this.prefix}/${1}s/\\${id}`)",
      "    if (response.ok) {",
      "      const data = await response.json()",
      "      this.detail = data",
      "      return { ...data, ok: true }",
      "    }",
      "    return response",
      "  }",
      "",
      "  edit = async (id: Number, fields: Record<string, any>) => {",
      "    await store.auth.refresh_token()",
      "    const response = await methods.patch(`\\${this.prefix}/${1}s/\\${id}`, fields)",
      "    if (response.ok) {",
      "      const data = await response.json()",
      "      this.detail = data",
      "      return { ...data, ok: true }",
      "    }",
      "    return response",
      "  }",
      "",
      "  destroy = async (id: Number) => {",
      "    await store.auth.refresh_token()",
      "    const response = await methods.delete(`\\${this.prefix}/${1}s/\\${id}`)",
      "    if (response.ok) {",
      "      const data = await response.json()",
      "      return { ...data, ok: true }",
      "    }",
      "    return response",
      "  }",
      "}"
    ],
    "description": "Freenit Svelte store"
  }
}
